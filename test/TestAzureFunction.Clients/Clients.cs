//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated from a template.
//		Manual changes to this file may cause unexpected behavior in your application.
//		Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using AspNetCore.Client.Authorization;
using AspNetCore.Client.Exceptions;
using AspNetCore.Client.GeneratorExtensions;
using AspNetCore.Client.Http;
using AspNetCore.Client.RequestModifiers;
using AspNetCore.Client.Serializers;
using AspNetCore.Client;
using Flurl.Http;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Threading;
using System;

namespace TestAzureFunction.Clients
{
	public static class TestAzureFunctionClientInstaller
	{
		/// <summary>
		/// Register the autogenerated clients into the container with a lifecycle of scoped.
		/// </summary>
		/// <param name="services"></param>
		/// <param name="configure">Overrides for client configuration</param>
		/// <returns></returns>
		public static IServiceCollection AddTestFunctionClients(this IServiceCollection services, Action<ClientConfiguration> configure)
		{
			var configuration = new ClientConfiguration();
			configuration.RegisterClientWrapperCreator<ITestAzureFunctionClient>(TestAzureFunctionClientWrapper.Create);
			configuration.UseClientWrapper<ITestAzureFunctionClientWrapper, TestAzureFunctionClientWrapper>((provider) => new TestAzureFunctionClientWrapper(provider.GetService<Func<ITestAzureFunctionClient, IFlurlClient>>(), configuration.GetSettings(), provider));
			configure?.Invoke(configuration);
			return configuration.ApplyConfiguration<ITestAzureFunctionClient>(services);
		}
	}

	public interface ITestAzureFunctionClientWrapper : IClientWrapper
	{
	}

	public class TestAzureFunctionClientWrapper : ITestAzureFunctionClientWrapper
	{
		public TimeSpan Timeout
		{
			get;
			internal set;
		}

		public IFlurlClient ClientWrapper
		{
			get;
			internal set;
		}

		public TestAzureFunctionClientWrapper(Func<ITestAzureFunctionClient, IFlurlClient> client, ClientSettings settings, IServiceProvider provider)
		{
			ClientWrapper = client(null);
			if (settings.BaseAddress != null)
			{
				ClientWrapper.BaseUrl = settings.BaseAddress(provider);
			}

			Timeout = settings.Timeout;
		}

		public static ITestAzureFunctionClientWrapper Create(Func<ITestAzureFunctionClient, IFlurlClient> client, ClientSettings settings, IServiceProvider provider)
		{
			return new TestAzureFunctionClientWrapper(client, settings, provider);
		}
	}

	public interface ITestAzureFunctionClient : IClient
	{
	}
}