//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated from a template.
//		Manual changes to this file may cause unexpected behavior in your application.
//		Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using TestBlazorApp.Shared;
using AspNetCore.Client;
using AspNetCore.Client.Authorization;
using AspNetCore.Client.Exceptions;
using AspNetCore.Client.Http;
using AspNetCore.Client.RequestModifiers;
using AspNetCore.Client.Serializers;
using Flurl.Http;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Linq;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace TestBlazorApp.Clients
{




	public static class TestBlazorAppClientInstaller
	{
		/// <summary>
		/// Register the autogenerated clients into the container with a lifecycle of scoped.
		/// </summary>
		/// <param name="services"></param>
		/// <param name="configure">Overrides for client configuration</param>
		/// <returns></returns>
		public static IServiceCollection InstallClients(this IServiceCollection services, Action<ClientConfiguration> configure)
		{
			var configuration = new ClientConfiguration();

			configuration.RegisterClientWrapperCreator(TestBlazorAppClientWrapper.Create);
			configuration.UseClientWrapper<ITestBlazorAppClientWrapper, TestBlazorAppClientWrapper>((provider) => new TestBlazorAppClientWrapper(provider.GetService<HttpClient>(), configuration.GetSettings()));

			configure?.Invoke(configuration);

			services.AddScoped<ITestBlazorAppClientRepository,TestBlazorAppClientRepository>();
			services.AddScoped<ISampleDataClient, SampleDataClient>();

			return configuration.ApplyConfiguration(services);;
		}
	}



	public interface ITestBlazorAppClientWrapper : IClientWrapper { }

	public class TestBlazorAppClientWrapper :  ITestBlazorAppClientWrapper
	{
		public TimeSpan Timeout { get; internal set; }
		public FlurlClient ClientWrapper { get; internal set; }

		public TestBlazorAppClientWrapper(HttpClient client, ClientSettings settings)
		{
			if (!string.IsNullOrEmpty(settings.BaseAddress))
			{
				client.BaseAddress = new Uri(settings.BaseAddress);
			}
			ClientWrapper = new FlurlClient(client);
			Timeout = settings.Timeout;
		}

		public static ITestBlazorAppClientWrapper Create(HttpClient client, ClientSettings settings)
		{
			return new TestBlazorAppClientWrapper(client, settings);
		}
	}

	public interface ITestBlazorAppClient : IClient { }





	public interface ITestBlazorAppClientRepository
	{
		ISampleDataClient SampleDataClient { get; }
	}

	internal class TestBlazorAppClientRepository : ITestBlazorAppClientRepository
	{
		public ISampleDataClient SampleDataClient { get; }

		public TestBlazorAppClientRepository
		(
			ISampleDataClient param_sampledataclient
		)
		{
			this.SampleDataClient = param_sampledataclient;
		}
	}





}





namespace TestBlazorApp.Clients
{





	public interface ISampleDataClient : ITestBlazorAppClient
	{

		
		IEnumerable<WeatherForecast> WeatherForecasts
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage WeatherForecastsRaw
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<IEnumerable<WeatherForecast>> WeatherForecastsAsync
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> WeatherForecastsRawAsync
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);


	}




	internal class SampleDataClient : ISampleDataClient
	{
		protected readonly ITestBlazorAppClientWrapper Client;
		protected readonly IHttpOverride HttpOverride;
		protected readonly IHttpSerializer Serializer;
		protected readonly IHttpRequestModifier Modifier;

		public SampleDataClient(
			ITestBlazorAppClientWrapper param_client,
			IHttpOverride param_httpoverride,
			IHttpSerializer param_serializer,
			IHttpRequestModifier param_modifier)
		{
			Client = param_client;
			HttpOverride = param_httpoverride;
			Serializer = param_serializer;
			Modifier = param_modifier;
		}



		
		public IEnumerable<WeatherForecast> WeatherForecasts
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "SampleData";
			var action = "WeatherForecasts";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


			if(response.IsSuccessStatusCode)
			{
				return Serializer.Deserialize<IEnumerable<WeatherForecast>>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult();
			}
			else
			{
				return default(IEnumerable<WeatherForecast>);
			}

		}

		
		public HttpResponseMessage WeatherForecastsRaw
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "SampleData";
			var action = "WeatherForecasts";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async ValueTask<IEnumerable<WeatherForecast>> WeatherForecastsAsync
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "SampleData";
			var action = "WeatherForecasts";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


			if(response.IsSuccessStatusCode)
			{
				return await Serializer.Deserialize<IEnumerable<WeatherForecast>>(response.Content).ConfigureAwait(false);
			}
			else
			{
				return default(IEnumerable<WeatherForecast>);
			}

		}

		
		public async ValueTask<HttpResponseMessage> WeatherForecastsRawAsync
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "SampleData";
			var action = "WeatherForecasts";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


	}




}



