//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated from a template.
//		Manual changes to this file may cause unexpected behavior in your application.
//		Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using TestBlazorApp.Shared;
using AspNetCore.Client;
using AspNetCore.Client.Authorization;
using AspNetCore.Client.Exceptions;
using AspNetCore.Client.Http;
using AspNetCore.Client.RequestModifiers;
using AspNetCore.Client.Serializers;
using Flurl.Http;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Linq;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace TestBlazorApp.Clients
{



	public static class TestBlazorAppClientInstaller
	{
		/// <summary>
		/// Register the autogenerated clients into the container with a lifecycle of scoped.
		/// </summary>
		/// <param name="services"></param>
		/// <param name="configure">Overrides for client configuration</param>
		/// <returns></returns>
		public static IServiceCollection InstallClients(this IServiceCollection services, Action<ClientConfiguration> configure)
		{
			var configuration = new ClientConfiguration();

			configuration.RegisterClientWrapperCreator(TestBlazorAppClientWrapper.Create);
			configuration.UseClientWrapper<ITestBlazorAppClientWrapper, TestBlazorAppClientWrapper>((provider) => new TestBlazorAppClientWrapper(provider.GetService<HttpClient>(), configuration.GetSettings()));

			configure?.Invoke(configuration);

			services.AddScoped<ITestBlazorAppClientRepository,TestBlazorAppClientRepository>();
			services.AddScoped<ISampleDataClient, SampleDataClient>();

			return configuration.ApplyConfiguration(services);;
		}
	}




	public interface ITestBlazorAppClientWrapper : IClientWrapper { }

	public class TestBlazorAppClientWrapper :  ITestBlazorAppClientWrapper
	{
		public TimeSpan Timeout { get; internal set; }
		public FlurlClient ClientWrapper { get; internal set; }

		public TestBlazorAppClientWrapper(HttpClient client, ClientSettings settings)
		{
			if (!string.IsNullOrEmpty(settings.BaseAddress))
			{
				client.BaseAddress = new Uri(settings.BaseAddress);
			}
			ClientWrapper = new FlurlClient(client);
			Timeout = settings.Timeout;
		}

		public static ITestBlazorAppClientWrapper Create(HttpClient client, ClientSettings settings)
		{
			return new TestBlazorAppClientWrapper(client, settings);
		}
	}

	public interface ITestBlazorAppClient : IClient { }


	public interface ITestBlazorAppClientRepository
	{
		ISampleDataClient SampleData { get; }
	}

	internal class TestBlazorAppClientRepository : ITestBlazorAppClientRepository
	{
		public ISampleDataClient SampleData { get; private set;}

		public TestBlazorAppClientRepository
		(
			ISampleDataClient sampledata
		)
		{
			this.SampleData = sampledata;
		}
	}


}


namespace TestBlazorApp.Clients
{




	public interface ISampleDataClient : ITestBlazorAppClient
	{
		
		IEnumerable<WeatherForecast> WeatherForecasts(Action<HttpResponseMessage> ResponseCallback = null, 
			TimeSpan? timeout = null, 
			IEnumerable<Cookie> cookies = null, 
			IDictionary<string, object> headers = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		HttpResponseMessage WeatherForecastsRaw(TimeSpan? timeout = null, 
			IEnumerable<Cookie> cookies = null, 
			IDictionary<string, object> headers = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<IEnumerable<WeatherForecast>> WeatherForecastsAsync(Action<HttpResponseMessage> ResponseCallback = null, 
			TimeSpan? timeout = null, 
			IEnumerable<Cookie> cookies = null, 
			IDictionary<string, object> headers = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<HttpResponseMessage> WeatherForecastsRawAsync(TimeSpan? timeout = null, 
			IEnumerable<Cookie> cookies = null, 
			IDictionary<string, object> headers = null, 
			CancellationToken cancellationToken = default(CancellationToken));

	}


	internal class SampleDataClient : ISampleDataClient
	{
		public readonly ITestBlazorAppClientWrapper Client;
		public readonly IHttpOverride HttpOverride;
		public readonly IHttpSerializer Serializer;
		public readonly IHttpRequestModifier Modifier;

		public SampleDataClient(ITestBlazorAppClientWrapper client, IHttpOverride httpOverride, IHttpSerializer serializer, IHttpRequestModifier modifier)
		{
			Client = client;
			HttpOverride = httpOverride;
			Serializer = serializer;
			Modifier = modifier;
		}


		public IEnumerable<WeatherForecast> WeatherForecasts(Action<HttpResponseMessage> ResponseCallback = null, 
			TimeSpan? timeout = null, 
			IEnumerable<Cookie> cookies = null, 
			IDictionary<string, object> headers = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "SampleData";
			var action = "WeatherForecasts";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithCookies(cookies)
				.WithHeaders(headers)
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(timeout ?? Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}


			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			
			if(response.IsSuccessStatusCode)
			{
				return Serializer.Deserialize<IEnumerable<WeatherForecast>>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult();
			}
			else
			{
				return default(IEnumerable<WeatherForecast>);
			}

		}


		public HttpResponseMessage WeatherForecastsRaw(TimeSpan? timeout = null, 
			IEnumerable<Cookie> cookies = null, 
			IDictionary<string, object> headers = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "SampleData";
			var action = "WeatherForecasts";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithCookies(cookies)
				.WithHeaders(headers)
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(timeout ?? Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}


		public async ValueTask<IEnumerable<WeatherForecast>> WeatherForecastsAsync(Action<HttpResponseMessage> ResponseCallback = null, 
			TimeSpan? timeout = null, 
			IEnumerable<Cookie> cookies = null, 
			IDictionary<string, object> headers = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "SampleData";
			var action = "WeatherForecasts";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithCookies(cookies)
				.WithHeaders(headers)
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(timeout ?? Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}


			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			
			if(response.IsSuccessStatusCode)
			{
				return await Serializer.Deserialize<IEnumerable<WeatherForecast>>(response.Content).ConfigureAwait(false);
			}
			else
			{
				return default(IEnumerable<WeatherForecast>);
			}

		}


		public async ValueTask<HttpResponseMessage> WeatherForecastsRawAsync(TimeSpan? timeout = null, 
			IEnumerable<Cookie> cookies = null, 
			IDictionary<string, object> headers = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "SampleData";
			var action = "WeatherForecasts";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithCookies(cookies)
				.WithHeaders(headers)
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(timeout ?? Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}

	}


}


