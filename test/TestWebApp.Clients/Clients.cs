//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated from a template.
//		Manual changes to this file may cause unexpected behavior in your application.
//		Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AspNetCore.Client.Authorization;
using AspNetCore.Client.Exceptions;
using AspNetCore.Client.Http;
using AspNetCore.Client.RequestModifiers;
using AspNetCore.Client.Serializers;
using AspNetCore.Client;
using Flurl.Http;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Threading;
using System;
using TestWebApp.Contracts;

namespace TestWebApp.Clients
{

#warning  File E:\Git_Github\AspNetCore.Client\test\TestWebApp\Controllers\ErrorController.cs is misconfigured for generation :: Controller must have a route to be valid for generation.


	public static class TestWebAppClientInstaller
	{
		/// <summary>
		/// Register the autogenerated clients into the container with a lifecycle of scoped.
		/// </summary>
		/// <param name="services"></param>
		/// <param name="configure">Overrides for client configuration</param>
		/// <returns></returns>
		public static IServiceCollection InstallClients(this IServiceCollection services, Action<ClientConfiguration> configure)
		{
			var configuration = new ClientConfiguration();

			configuration.RegisterClientWrapperCreator(TestWebAppClientWrapper.Create);
			configuration.UseClientWrapper<ITestWebAppClientWrapper, TestWebAppClientWrapper>((provider) => new TestWebAppClientWrapper(provider.GetService<HttpClient>(), configuration.GetSettings()));

			configure?.Invoke(configuration);

			services.AddScoped<ITestWebAppClientRepository,TestWebAppClientRepository>();
			services.AddScoped<ITestWebAppClientV1Repository,TestWebAppClientV1Repository>();
			services.AddScoped<ITestWebAppClientV2Repository,TestWebAppClientV2Repository>();
			services.AddScoped<FancySuffix.INamespacedClient, FancySuffix.NamespacedClient>();
			services.AddScoped<IValuesClient, ValuesClient>();
			services.AddScoped<V1.ITestClient, V1.TestClient>();
			services.AddScoped<V2.ITestClient, V2.TestClient>();

			return configuration.ApplyConfiguration(services);;
		}
	}



	public interface ITestWebAppClientWrapper : IClientWrapper { }

	public class TestWebAppClientWrapper :  ITestWebAppClientWrapper
	{
		public TimeSpan Timeout { get; internal set; }
		public FlurlClient ClientWrapper { get; internal set; }

		public TestWebAppClientWrapper(HttpClient client, ClientSettings settings)
		{
			if (!string.IsNullOrEmpty(settings.BaseAddress))
			{
				client.BaseAddress = new Uri(settings.BaseAddress);
			}
			ClientWrapper = new FlurlClient(client);
			Timeout = settings.Timeout;
		}

		public static ITestWebAppClientWrapper Create(HttpClient client, ClientSettings settings)
		{
			return new TestWebAppClientWrapper(client, settings);
		}
	}

	public interface ITestWebAppClient : IClient { }





	public interface ITestWebAppClientRepository
	{
		FancySuffix.INamespacedClient NamespacedClient { get; }
		IValuesClient ValuesClient { get; }
	}

	internal class TestWebAppClientRepository : ITestWebAppClientRepository
	{
		public FancySuffix.INamespacedClient NamespacedClient { get; }
		public IValuesClient ValuesClient { get; }

		public TestWebAppClientRepository
		(
			FancySuffix.INamespacedClient param_namespacedclient,
			IValuesClient param_valuesclient
		)
		{
			this.NamespacedClient = param_namespacedclient;
			this.ValuesClient = param_valuesclient;
		}
	}



	public interface ITestWebAppClientV1Repository
	{
		V1.ITestClient TestClient { get; }
	}

	internal class TestWebAppClientV1Repository : ITestWebAppClientV1Repository
	{
		public V1.ITestClient TestClient { get; }

		public TestWebAppClientV1Repository
		(
			V1.ITestClient param_testclient
		)
		{
			this.TestClient = param_testclient;
		}
	}



	public interface ITestWebAppClientV2Repository
	{
		V2.ITestClient TestClient { get; }
	}

	internal class TestWebAppClientV2Repository : ITestWebAppClientV2Repository
	{
		public V2.ITestClient TestClient { get; }

		public TestWebAppClientV2Repository
		(
			V2.ITestClient param_testclient
		)
		{
			this.TestClient = param_testclient;
		}
	}





}





namespace TestWebApp.Clients
{

namespace FancySuffix
{



	public interface INamespacedClient : ITestWebAppClient
	{

		
		void Test
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage TestRaw
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task TestAsync
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> TestRawAsync
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);


	}




	internal class NamespacedClient : INamespacedClient
	{
		protected readonly ITestWebAppClientWrapper Client;
		protected readonly IHttpOverride HttpOverride;
		protected readonly IHttpSerializer Serializer;
		protected readonly IHttpRequestModifier Modifier;

		public NamespacedClient(
			ITestWebAppClientWrapper param_client,
			IHttpOverride param_httpoverride,
			IHttpSerializer param_serializer,
			IHttpRequestModifier param_modifier)
		{
			Client = param_client;
			HttpOverride = param_httpoverride;
			Serializer = param_serializer;
			Modifier = param_modifier;
		}



		
		public void Test
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{



			string url = $@"api/namespaced/test";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage TestRaw
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{



			string url = $@"api/namespaced/test";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task TestAsync
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{



			string url = $@"api/namespaced/test";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> TestRawAsync
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{



			string url = $@"api/namespaced/test";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


	}


}






	public interface IValuesClient : ITestWebAppClient
	{

		
		IEnumerable<string> Get
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage GetRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<IEnumerable<string>> GetAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> GetRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		string Get
		(
			int id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage GetRaw
		(
			int id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<string> GetAsync
		(
			int id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> GetRawAsync
		(
			int id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void Post
		(
			string value,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage PostRaw
		(
			string value,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task PostAsync
		(
			string value,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> PostRawAsync
		(
			string value,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void Put
		(
			string value,
			int id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage PutRaw
		(
			string value,
			int id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task PutAsync
		(
			string value,
			int id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> PutRawAsync
		(
			string value,
			int id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void Delete
		(
			int id,
			int ControllerHeader = 0,
			SecurityHeader auth = null,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage DeleteRaw
		(
			int id,
			int ControllerHeader = 0,
			SecurityHeader auth = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task DeleteAsync
		(
			int id,
			int ControllerHeader = 0,
			SecurityHeader auth = null,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> DeleteRawAsync
		(
			int id,
			int ControllerHeader = 0,
			SecurityHeader auth = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void CancellationTestEndpoint
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage CancellationTestEndpointRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task CancellationTestEndpointAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> CancellationTestEndpointRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void IgnoreMe
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage IgnoreMeRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task IgnoreMeAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> IgnoreMeRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		string HeaderTestString
		(
			String SpecialValue1,
			string SpecialValue2,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage HeaderTestStringRaw
		(
			String SpecialValue1,
			string SpecialValue2,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<string> HeaderTestStringAsync
		(
			String SpecialValue1,
			string SpecialValue2,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> HeaderTestStringRawAsync
		(
			String SpecialValue1,
			string SpecialValue2,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		int HeaderTestInt
		(
			int SpecialValue1,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage HeaderTestIntRaw
		(
			int SpecialValue1,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<int> HeaderTestIntAsync
		(
			int SpecialValue1,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> HeaderTestIntRawAsync
		(
			int SpecialValue1,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void FancyDtoReturn
		(
			int id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<MyFancyDto> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage FancyDtoReturnRaw
		(
			int id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task FancyDtoReturnAsync
		(
			int id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<MyFancyDto> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> FancyDtoReturnRawAsync
		(
			int id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void TaskReturn
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage TaskReturnRaw
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task TaskReturnAsync
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> TaskReturnRawAsync
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		MyFancyDto DtoForDto
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage DtoForDtoRaw
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<MyFancyDto> DtoForDtoAsync
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> DtoForDtoRawAsync
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void GuidReturn
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<Guid> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage GuidReturnRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task GuidReturnAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<Guid> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> GuidReturnRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void DateTimeReturns
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<DateTime> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage DateTimeReturnsRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task DateTimeReturnsAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<DateTime> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> DateTimeReturnsRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void BoolReturns
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<bool> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage BoolReturnsRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task BoolReturnsAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<bool> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> BoolReturnsRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void PostWithNoBody
		(
			Guid id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage PostWithNoBodyRaw
		(
			Guid id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task PostWithNoBodyAsync
		(
			Guid id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> PostWithNoBodyRawAsync
		(
			Guid id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void ComplexPost
		(
			MyFancyDto dto,
			Guid testId,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<MyFancyDto> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage ComplexPostRaw
		(
			MyFancyDto dto,
			Guid testId,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task ComplexPostAsync
		(
			MyFancyDto dto,
			Guid testId,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<MyFancyDto> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> ComplexPostRawAsync
		(
			MyFancyDto dto,
			Guid testId,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void PostWithSimpleBody
		(
			Guid id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<Guid> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage PostWithSimpleBodyRaw
		(
			Guid id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task PostWithSimpleBodyAsync
		(
			Guid id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<Guid> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> PostWithSimpleBodyRawAsync
		(
			Guid id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void EnumerableGet
		(
			IEnumerable<int> customIds,
			IEnumerable<bool> truth,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<IEnumerable<int>> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage EnumerableGetRaw
		(
			IEnumerable<int> customIds,
			IEnumerable<bool> truth,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task EnumerableGetAsync
		(
			IEnumerable<int> customIds,
			IEnumerable<bool> truth,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<IEnumerable<int>> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> EnumerableGetRawAsync
		(
			IEnumerable<int> customIds,
			IEnumerable<bool> truth,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void AttributeFormatting
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<IEnumerable<int>> OKCallback = null,
			Action<int> NoContentCallback = null,
			Action<int> SeeOtherCallback = null,
			Action<string> NotModifiedCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage AttributeFormattingRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task AttributeFormattingAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<IEnumerable<int>> OKCallback = null,
			Action<int> NoContentCallback = null,
			Action<int> SeeOtherCallback = null,
			Action<string> NotModifiedCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> AttributeFormattingRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);



		
		void QueryParameter
		(
			string name,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<string> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage QueryParameterRaw
		(
			string name,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task QueryParameterAsync
		(
			string name,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<string> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> QueryParameterRawAsync
		(
			string name,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);


	}




	internal class ValuesClient : IValuesClient
	{
		protected readonly ITestWebAppClientWrapper Client;
		protected readonly IHttpOverride HttpOverride;
		protected readonly IHttpSerializer Serializer;
		protected readonly IHttpRequestModifier Modifier;

		public ValuesClient(
			ITestWebAppClientWrapper param_client,
			IHttpOverride param_httpoverride,
			IHttpSerializer param_serializer,
			IHttpRequestModifier param_modifier)
		{
			Client = param_client;
			HttpOverride = param_httpoverride;
			Serializer = param_serializer;
			Modifier = param_modifier;
		}



		
		public IEnumerable<string> Get
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


			if(response.IsSuccessStatusCode)
			{
				return Serializer.Deserialize<IEnumerable<string>>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult();
			}
			else
			{
				return default(IEnumerable<string>);
			}

		}

		
		public HttpResponseMessage GetRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async ValueTask<IEnumerable<string>> GetAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


			if(response.IsSuccessStatusCode)
			{
				return await Serializer.Deserialize<IEnumerable<string>>(response.Content).ConfigureAwait(false);
			}
			else
			{
				return default(IEnumerable<string>);
			}

		}

		
		public async ValueTask<HttpResponseMessage> GetRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public string Get
		(
			int id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithHeader("GEEET", "FULL")				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


			if(response.IsSuccessStatusCode)
			{
				return Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult();
			}
			else
			{
				return default(string);
			}

		}

		
		public HttpResponseMessage GetRaw
		(
			int id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithHeader("GEEET", "FULL")				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async ValueTask<string> GetAsync
		(
			int id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithHeader("GEEET", "FULL")				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


			if(response.IsSuccessStatusCode)
			{
				return await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false);
			}
			else
			{
				return default(string);
			}

		}

		
		public async ValueTask<HttpResponseMessage> GetRawAsync
		(
			int id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithHeader("GEEET", "FULL")				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void Post
		(
			string value,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(value), cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, value, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage PostRaw
		(
			string value,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(value), cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, value, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task PostAsync
		(
			string value,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(value), cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, value, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> PostRawAsync
		(
			string value,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(value), cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, value, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void Put
		(
			string value,
			int id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Put, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PutAsync(Serializer.Serialize(value), cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Put, url, value, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage PutRaw
		(
			string value,
			int id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Put, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PutAsync(Serializer.Serialize(value), cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Put, url, value, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task PutAsync
		(
			string value,
			int id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Put, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PutAsync(Serializer.Serialize(value), cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Put, url, value, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> PutRawAsync
		(
			string value,
			int id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Put, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PutAsync(Serializer.Serialize(value), cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Put, url, value, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void Delete
		(
			int id,
			int ControllerHeader = 0,
			SecurityHeader auth = null,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Delete, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)				
							.WithAuth(auth)
							.AllowAnyHttpStatus()
							.DeleteAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Delete, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage DeleteRaw
		(
			int id,
			int ControllerHeader = 0,
			SecurityHeader auth = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Delete, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)				
							.WithAuth(auth)
							.AllowAnyHttpStatus()
							.DeleteAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Delete, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task DeleteAsync
		(
			int id,
			int ControllerHeader = 0,
			SecurityHeader auth = null,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Delete, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)				
							.WithAuth(auth)
							.AllowAnyHttpStatus()
							.DeleteAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Delete, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> DeleteRawAsync
		(
			int id,
			int ControllerHeader = 0,
			SecurityHeader auth = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";

			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Delete, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)				
							.WithAuth(auth)
							.AllowAnyHttpStatus()
							.DeleteAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Delete, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void CancellationTestEndpoint
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "CancellationTestEndpoint";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage CancellationTestEndpointRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "CancellationTestEndpoint";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task CancellationTestEndpointAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "CancellationTestEndpoint";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> CancellationTestEndpointRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "CancellationTestEndpoint";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void IgnoreMe
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "IgnoreMe";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage IgnoreMeRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "IgnoreMe";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task IgnoreMeAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "IgnoreMe";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> IgnoreMeRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "IgnoreMe";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public string HeaderTestString
		(
			String SpecialValue1,
			string SpecialValue2,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "HeaderTestString";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)				
							.WithHeader("SpecialValue1", SpecialValue1)				
							.WithHeader("SpecialValue2", SpecialValue2)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


			if(response.IsSuccessStatusCode)
			{
				return Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult();
			}
			else
			{
				return default(string);
			}

		}

		
		public HttpResponseMessage HeaderTestStringRaw
		(
			String SpecialValue1,
			string SpecialValue2,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "HeaderTestString";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)				
							.WithHeader("SpecialValue1", SpecialValue1)				
							.WithHeader("SpecialValue2", SpecialValue2)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async ValueTask<string> HeaderTestStringAsync
		(
			String SpecialValue1,
			string SpecialValue2,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "HeaderTestString";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)				
							.WithHeader("SpecialValue1", SpecialValue1)				
							.WithHeader("SpecialValue2", SpecialValue2)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


			if(response.IsSuccessStatusCode)
			{
				return await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false);
			}
			else
			{
				return default(string);
			}

		}

		
		public async ValueTask<HttpResponseMessage> HeaderTestStringRawAsync
		(
			String SpecialValue1,
			string SpecialValue2,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "HeaderTestString";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)				
							.WithHeader("SpecialValue1", SpecialValue1)				
							.WithHeader("SpecialValue2", SpecialValue2)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public int HeaderTestInt
		(
			int SpecialValue1,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "HeaderTestInt";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)				
							.WithHeader("SpecialValue1", SpecialValue1)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


			if(response.IsSuccessStatusCode)
			{
				return Serializer.Deserialize<int>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult();
			}
			else
			{
				return default(int);
			}

		}

		
		public HttpResponseMessage HeaderTestIntRaw
		(
			int SpecialValue1,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "HeaderTestInt";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)				
							.WithHeader("SpecialValue1", SpecialValue1)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async ValueTask<int> HeaderTestIntAsync
		(
			int SpecialValue1,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "HeaderTestInt";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)				
							.WithHeader("SpecialValue1", SpecialValue1)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


			if(response.IsSuccessStatusCode)
			{
				return await Serializer.Deserialize<int>(response.Content).ConfigureAwait(false);
			}
			else
			{
				return default(int);
			}

		}

		
		public async ValueTask<HttpResponseMessage> HeaderTestIntRawAsync
		(
			int SpecialValue1,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "HeaderTestInt";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)				
							.WithHeader("SpecialValue1", SpecialValue1)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void FancyDtoReturn
		(
			int id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<MyFancyDto> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			if(!int.TryParse(id.ToString(),out _))
			{
				throw new InvalidRouteException("Parameter id does not parse into an int.");
			}
			var controller = "Values";
			var action = "FancyDtoReturn";
			string url = $@"api/{controller}/{action}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(Serializer.Deserialize<MyFancyDto>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage FancyDtoReturnRaw
		(
			int id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			if(!int.TryParse(id.ToString(),out _))
			{
				throw new InvalidRouteException("Parameter id does not parse into an int.");
			}
			var controller = "Values";
			var action = "FancyDtoReturn";
			string url = $@"api/{controller}/{action}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task FancyDtoReturnAsync
		(
			int id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<MyFancyDto> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			if(!int.TryParse(id.ToString(),out _))
			{
				throw new InvalidRouteException("Parameter id does not parse into an int.");
			}
			var controller = "Values";
			var action = "FancyDtoReturn";
			string url = $@"api/{controller}/{action}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(await Serializer.Deserialize<MyFancyDto>(response.Content).ConfigureAwait(false));
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> FancyDtoReturnRawAsync
		(
			int id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			if(!int.TryParse(id.ToString(),out _))
			{
				throw new InvalidRouteException("Parameter id does not parse into an int.");
			}
			var controller = "Values";
			var action = "FancyDtoReturn";
			string url = $@"api/{controller}/{action}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void TaskReturn
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "TaskReturn";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(dto), cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, dto, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage TaskReturnRaw
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "TaskReturn";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(dto), cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, dto, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task TaskReturnAsync
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "TaskReturn";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(dto), cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, dto, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> TaskReturnRawAsync
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "TaskReturn";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(dto), cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, dto, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public MyFancyDto DtoForDto
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "DtoForDto";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(dto), cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, dto, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


			if(response.IsSuccessStatusCode)
			{
				return Serializer.Deserialize<MyFancyDto>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult();
			}
			else
			{
				return default(MyFancyDto);
			}

		}

		
		public HttpResponseMessage DtoForDtoRaw
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "DtoForDto";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(dto), cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, dto, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async ValueTask<MyFancyDto> DtoForDtoAsync
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "DtoForDto";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(dto), cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, dto, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


			if(response.IsSuccessStatusCode)
			{
				return await Serializer.Deserialize<MyFancyDto>(response.Content).ConfigureAwait(false);
			}
			else
			{
				return default(MyFancyDto);
			}

		}

		
		public async ValueTask<HttpResponseMessage> DtoForDtoRawAsync
		(
			MyFancyDto dto,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "DtoForDto";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(dto), cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, dto, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void GuidReturn
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<Guid> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "GuidReturn";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(Serializer.Deserialize<Guid>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage GuidReturnRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "GuidReturn";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task GuidReturnAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<Guid> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "GuidReturn";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(await Serializer.Deserialize<Guid>(response.Content).ConfigureAwait(false));
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> GuidReturnRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "GuidReturn";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void DateTimeReturns
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<DateTime> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "DateTimeReturns";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(Serializer.Deserialize<DateTime>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage DateTimeReturnsRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "DateTimeReturns";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task DateTimeReturnsAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<DateTime> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "DateTimeReturns";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(await Serializer.Deserialize<DateTime>(response.Content).ConfigureAwait(false));
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> DateTimeReturnsRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "DateTimeReturns";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void BoolReturns
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<bool> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "BoolReturns";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(Serializer.Deserialize<bool>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage BoolReturnsRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "BoolReturns";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task BoolReturnsAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<bool> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "BoolReturns";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(await Serializer.Deserialize<bool>(response.Content).ConfigureAwait(false));
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> BoolReturnsRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "BoolReturns";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void PostWithNoBody
		(
			Guid id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			if(!Guid.TryParse(id.ToString(),out _))
			{
				throw new InvalidRouteException("Parameter id does not parse into an Guid.");
			}
			var controller = "Values";
			var action = "PostWithNoBody";
			string url = $@"api/{controller}/{action}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(null, cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage PostWithNoBodyRaw
		(
			Guid id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			if(!Guid.TryParse(id.ToString(),out _))
			{
				throw new InvalidRouteException("Parameter id does not parse into an Guid.");
			}
			var controller = "Values";
			var action = "PostWithNoBody";
			string url = $@"api/{controller}/{action}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(null, cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task PostWithNoBodyAsync
		(
			Guid id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			if(!Guid.TryParse(id.ToString(),out _))
			{
				throw new InvalidRouteException("Parameter id does not parse into an Guid.");
			}
			var controller = "Values";
			var action = "PostWithNoBody";
			string url = $@"api/{controller}/{action}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(null, cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke();
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> PostWithNoBodyRawAsync
		(
			Guid id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			if(!Guid.TryParse(id.ToString(),out _))
			{
				throw new InvalidRouteException("Parameter id does not parse into an Guid.");
			}
			var controller = "Values";
			var action = "PostWithNoBody";
			string url = $@"api/{controller}/{action}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(null, cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void ComplexPost
		(
			MyFancyDto dto,
			Guid testId,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<MyFancyDto> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			if(!Guid.TryParse(testId.ToString(),out _))
			{
				throw new InvalidRouteException("Parameter testId does not parse into an Guid.");
			}
			var controller = "Values";
			var action = "ComplexPost";
			string url = $@"api/{controller}/{action}/{testId}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(dto), cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, dto, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(Serializer.Deserialize<MyFancyDto>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage ComplexPostRaw
		(
			MyFancyDto dto,
			Guid testId,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			if(!Guid.TryParse(testId.ToString(),out _))
			{
				throw new InvalidRouteException("Parameter testId does not parse into an Guid.");
			}
			var controller = "Values";
			var action = "ComplexPost";
			string url = $@"api/{controller}/{action}/{testId}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(dto), cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, dto, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task ComplexPostAsync
		(
			MyFancyDto dto,
			Guid testId,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<MyFancyDto> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			if(!Guid.TryParse(testId.ToString(),out _))
			{
				throw new InvalidRouteException("Parameter testId does not parse into an Guid.");
			}
			var controller = "Values";
			var action = "ComplexPost";
			string url = $@"api/{controller}/{action}/{testId}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(dto), cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, dto, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(await Serializer.Deserialize<MyFancyDto>(response.Content).ConfigureAwait(false));
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> ComplexPostRawAsync
		(
			MyFancyDto dto,
			Guid testId,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			if(!Guid.TryParse(testId.ToString(),out _))
			{
				throw new InvalidRouteException("Parameter testId does not parse into an Guid.");
			}
			var controller = "Values";
			var action = "ComplexPost";
			string url = $@"api/{controller}/{action}/{testId}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(dto), cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, dto, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void PostWithSimpleBody
		(
			Guid id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<Guid> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "PostWithSimpleBody";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(id), cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, id, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(Serializer.Deserialize<Guid>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage PostWithSimpleBodyRaw
		(
			Guid id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "PostWithSimpleBody";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(id), cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, id, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task PostWithSimpleBodyAsync
		(
			Guid id,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<Guid> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "PostWithSimpleBody";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(id), cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, id, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(await Serializer.Deserialize<Guid>(response.Content).ConfigureAwait(false));
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> PostWithSimpleBodyRawAsync
		(
			Guid id,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "PostWithSimpleBody";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(Serializer.Serialize(id), cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, id, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void EnumerableGet
		(
			IEnumerable<int> customIds,
			IEnumerable<bool> truth,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<IEnumerable<int>> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "EnumerableGet";
			string url = $@"api/{controller}/{action}?{string.Join("&",customIds.Select(x => $"{nameof(customIds)}={x}"))}&{string.Join("&",truth.Select(x => $"{nameof(truth)}={x}"))}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(Serializer.Deserialize<IEnumerable<int>>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage EnumerableGetRaw
		(
			IEnumerable<int> customIds,
			IEnumerable<bool> truth,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "EnumerableGet";
			string url = $@"api/{controller}/{action}?{string.Join("&",customIds.Select(x => $"{nameof(customIds)}={x}"))}&{string.Join("&",truth.Select(x => $"{nameof(truth)}={x}"))}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task EnumerableGetAsync
		(
			IEnumerable<int> customIds,
			IEnumerable<bool> truth,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<IEnumerable<int>> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "EnumerableGet";
			string url = $@"api/{controller}/{action}?{string.Join("&",customIds.Select(x => $"{nameof(customIds)}={x}"))}&{string.Join("&",truth.Select(x => $"{nameof(truth)}={x}"))}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(await Serializer.Deserialize<IEnumerable<int>>(response.Content).ConfigureAwait(false));
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> EnumerableGetRawAsync
		(
			IEnumerable<int> customIds,
			IEnumerable<bool> truth,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "EnumerableGet";
			string url = $@"api/{controller}/{action}?{string.Join("&",customIds.Select(x => $"{nameof(customIds)}={x}"))}&{string.Join("&",truth.Select(x => $"{nameof(truth)}={x}"))}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void AttributeFormatting
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<IEnumerable<int>> OKCallback = null,
			Action<int> NoContentCallback = null,
			Action<int> SeeOtherCallback = null,
			Action<string> NotModifiedCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "AttributeFormatting";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(Serializer.Deserialize<IEnumerable<int>>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(NoContentCallback != null && NoContentCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for NoContentCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.NoContent)
			{
				NoContentCallback?.Invoke(Serializer.Deserialize<int>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(SeeOtherCallback != null && SeeOtherCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for SeeOtherCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.SeeOther)
			{
				SeeOtherCallback?.Invoke(Serializer.Deserialize<int>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(NotModifiedCallback != null && NotModifiedCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for NotModifiedCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.NotModified)
			{
				NotModifiedCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage AttributeFormattingRaw
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "AttributeFormatting";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task AttributeFormattingAsync
		(
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<IEnumerable<int>> OKCallback = null,
			Action<int> NoContentCallback = null,
			Action<int> SeeOtherCallback = null,
			Action<string> NotModifiedCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "AttributeFormatting";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(await Serializer.Deserialize<IEnumerable<int>>(response.Content).ConfigureAwait(false));
			}



			if(NoContentCallback != null && NoContentCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for NoContentCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.NoContent)
			{
				NoContentCallback?.Invoke(await Serializer.Deserialize<int>(response.Content).ConfigureAwait(false));
			}



			if(SeeOtherCallback != null && SeeOtherCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for SeeOtherCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.SeeOther)
			{
				SeeOtherCallback?.Invoke(await Serializer.Deserialize<int>(response.Content).ConfigureAwait(false));
			}



			if(NotModifiedCallback != null && NotModifiedCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for NotModifiedCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.NotModified)
			{
				NotModifiedCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> AttributeFormattingRawAsync
		(
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "AttributeFormatting";
			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}




		
		public void QueryParameter
		(
			string name,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<string> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "QueryParameter";
			string url = $@"api/{controller}/{action}?{nameof(name)}={name}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage QueryParameterRaw
		(
			string name,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "QueryParameter";
			string url = $@"api/{controller}/{action}?{nameof(name)}={name}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task QueryParameterAsync
		(
			string name,
			int ControllerHeader = 0,
			Action<string> BadRequestCallback = null,
			Action InternalServerErrorCallback = null,
			Action<string> OKCallback = null,
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "QueryParameter";
			string url = $@"api/{controller}/{action}?{nameof(name)}={name}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(BadRequestCallback != null && BadRequestCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for BadRequestCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.BadRequest)
			{
				BadRequestCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(InternalServerErrorCallback != null && InternalServerErrorCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for InternalServerErrorCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.InternalServerError)
			{
				InternalServerErrorCallback?.Invoke();
			}



			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported.As they will run out of the scope of this call.");
			}

			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false));
			}



			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> QueryParameterRawAsync
		(
			string name,
			int ControllerHeader = 0,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{

			var controller = "Values";
			var action = "QueryParameter";
			string url = $@"api/{controller}/{action}?{nameof(name)}={name}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Get, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithHeader("Test", "EXTRA")				
							.WithHeader("ControllerHeader", ControllerHeader)				
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.GetAsync(cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Get, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


	}




}


namespace TestWebApp.Clients.V1
{





	public interface ITestClient : ITestWebAppClient
	{

		
		void Endpoint
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage EndpointRaw
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task EndpointAsync
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> EndpointRawAsync
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);


	}




	internal class TestClient : ITestClient
	{
		protected readonly ITestWebAppClientWrapper Client;
		protected readonly IHttpOverride HttpOverride;
		protected readonly IHttpSerializer Serializer;
		protected readonly IHttpRequestModifier Modifier;

		public TestClient(
			ITestWebAppClientWrapper param_client,
			IHttpOverride param_httpoverride,
			IHttpSerializer param_serializer,
			IHttpRequestModifier param_modifier)
		{
			Client = param_client;
			HttpOverride = param_httpoverride;
			Serializer = param_serializer;
			Modifier = param_modifier;
		}



		
		public void Endpoint
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{



			string url = $@"api/v1/test/endpoint";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(null, cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage EndpointRaw
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{



			string url = $@"api/v1/test/endpoint";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(null, cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task EndpointAsync
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{



			string url = $@"api/v1/test/endpoint";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(null, cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> EndpointRawAsync
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{



			string url = $@"api/v1/test/endpoint";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(null, cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


	}




}


namespace TestWebApp.Clients.V2
{





	public interface ITestClient : ITestWebAppClient
	{

		
		void Endpoint
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		HttpResponseMessage EndpointRaw
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		Task EndpointAsync
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);

		
		ValueTask<HttpResponseMessage> EndpointRawAsync
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		);


	}




	internal class TestClient : ITestClient
	{
		protected readonly ITestWebAppClientWrapper Client;
		protected readonly IHttpOverride HttpOverride;
		protected readonly IHttpSerializer Serializer;
		protected readonly IHttpRequestModifier Modifier;

		public TestClient(
			ITestWebAppClientWrapper param_client,
			IHttpOverride param_httpoverride,
			IHttpSerializer param_serializer,
			IHttpRequestModifier param_modifier)
		{
			Client = param_client;
			HttpOverride = param_httpoverride;
			Serializer = param_serializer;
			Modifier = param_modifier;
		}



		
		public void Endpoint
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{



			string url = $@"api/v2/test/endpoint";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(null, cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public HttpResponseMessage EndpointRaw
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{



			string url = $@"api/v2/test/endpoint";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();

			if(response == null)
			{
				response = Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(null, cancellationToken)
							.ConfigureAwait(false).GetAwaiter().GetResult();

				HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, null, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}

		
		public async Task EndpointAsync
		(
			Action<HttpResponseMessage> ResponseCallback = null,
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{



			string url = $@"api/v2/test/endpoint";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(null, cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported.As they will run out of the scope of this call.");
			}

			ResponseCallback?.Invoke(response);


		}

		
		public async ValueTask<HttpResponseMessage> EndpointRawAsync
		(
			IDictionary<String,Object> headers = null,
			IEnumerable<Cookie> cookies = null,
			TimeSpan? timeout = null,
			CancellationToken cancellationToken = default
		)
		{



			string url = $@"api/v2/test/endpoint";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(HttpMethod.Post, url, null, cancellationToken).ConfigureAwait(false);

			if(response == null)
			{
				response = await Client.ClientWrapper
							.Request(url)
							.WithRequestModifiers(Modifier)				
							.WithCookies(cookies)				
							.WithHeaders(headers)				
							.WithTimeout(timeout ?? Client.Timeout)
							.AllowAnyHttpStatus()
							.PostAsync(null, cancellationToken)
							.ConfigureAwait(false);

				await HttpOverride.OnNonOverridedResponseAsync(HttpMethod.Post, url, null, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


	}




}



