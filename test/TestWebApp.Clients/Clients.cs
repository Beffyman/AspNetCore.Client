//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated from a template.
//		Manual changes to this file may cause unexpected behavior in your application.
//		Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using TestWebApp.Contracts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using System.Net.Http;
using Flurl.Http;
using Flurl;
using System.Runtime.CompilerServices;
using AspNetCore.Client;
using AspNetCore.Client.Authorization;
using AspNetCore.Client.Exceptions;
using Microsoft.Extensions.DependencyInjection;
using System.Threading;
using AspNetCore.Client.Serializers;
using AspNetCore.Client.Http;
using AspNetCore.Client.RequestModifiers;

namespace TestWebApp.Clients
{


	public static class TestWebAppClientInstaller
	{
		/// <summary>
		/// Register the autogenerated clients into the container with a lifecycle of scoped.
		/// </summary>
		/// <param name="services"></param>
		/// <param name="configure">Overrides for client configuration</param>
		/// <returns></returns>
		public static IServiceCollection InstallClients(this IServiceCollection services, Action<ClientConfiguration> configure = null)
		{
			var configuration = new ClientConfiguration();
			configure?.Invoke(configuration);

			services.AddScoped<TestWebAppClient>((provider) => new TestWebAppClient(provider.GetService<HttpClient>(), configuration.HttpBaseAddress, configuration.Timeout));

			services.AddScoped<IValuesClient, ValuesClient>();

			return configuration.ApplyConfiguration(services);;
		}
	}



	public class TestWebAppClient
	{
		public TimeSpan Timeout { get; internal set; }
		public readonly FlurlClient ClientWrapper;

		public TestWebAppClient(HttpClient client, string baseAddress, TimeSpan timeout)
		{
			if (!string.IsNullOrEmpty(baseAddress))
			{
				client.BaseAddress = new Uri(baseAddress);
			}
			ClientWrapper = new FlurlClient(client);
			Timeout = timeout;
		}

	}

	public interface ITestWebAppClient : IClient { }


	public interface IValuesClient : ITestWebAppClient
	{
		
		IEnumerable<string> Get(int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		HttpResponseMessage GetRaw(int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<IEnumerable<string>> GetAsync(int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<HttpResponseMessage> GetRawAsync(int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		string Get(int id, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		HttpResponseMessage GetRaw(int id, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<string> GetAsync(int id, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<HttpResponseMessage> GetRawAsync(int id, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		void Post(string value, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		HttpResponseMessage PostRaw(string value, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		Task PostAsync(string value, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<HttpResponseMessage> PostRawAsync(string value, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		void Put(int id, 
			string value, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		HttpResponseMessage PutRaw(int id, 
			string value, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		Task PutAsync(int id, 
			string value, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<HttpResponseMessage> PutRawAsync(int id, 
			string value, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		void Delete(int id, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			SecurityHeader auth = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		HttpResponseMessage DeleteRaw(int id, 
			int ControllerHeader = 0, 
			SecurityHeader auth = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		Task DeleteAsync(int id, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			SecurityHeader auth = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<HttpResponseMessage> DeleteRawAsync(int id, 
			int ControllerHeader = 0, 
			SecurityHeader auth = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		void CancellationTestEndpoint(int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		HttpResponseMessage CancellationTestEndpointRaw(int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		Task CancellationTestEndpointAsync(int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<HttpResponseMessage> CancellationTestEndpointRawAsync(int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		string HeaderTestString(String SpecialValue1, 
			string SpecialValue2, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		HttpResponseMessage HeaderTestStringRaw(String SpecialValue1, 
			string SpecialValue2, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<string> HeaderTestStringAsync(String SpecialValue1, 
			string SpecialValue2, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<HttpResponseMessage> HeaderTestStringRawAsync(String SpecialValue1, 
			string SpecialValue2, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		int HeaderTestInt(int SpecialValue1, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		HttpResponseMessage HeaderTestIntRaw(int SpecialValue1, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<int> HeaderTestIntAsync(int SpecialValue1, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<HttpResponseMessage> HeaderTestIntRawAsync(int SpecialValue1, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		void FancyDtoReturn(int id, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<MyFancyDto> OKCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		HttpResponseMessage FancyDtoReturnRaw(int id, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		Task FancyDtoReturnAsync(int id, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<MyFancyDto> OKCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<HttpResponseMessage> FancyDtoReturnRawAsync(int id, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		void TaskReturn(MyFancyDto dto, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		HttpResponseMessage TaskReturnRaw(MyFancyDto dto, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		Task TaskReturnAsync(MyFancyDto dto, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken));

		
		ValueTask<HttpResponseMessage> TaskReturnRawAsync(MyFancyDto dto, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken));

	}


	public class ValuesClient : IValuesClient
	{
		public readonly TestWebAppClient Client;
		public readonly IHttpOverride HttpOverride;
		public readonly IHttpSerializer Serializer;
		public readonly IRequestModifier Modifier;

		public ValuesClient(TestWebAppClient client, IHttpOverride httpOverride, IHttpSerializer serializer, IRequestModifier modifier)
		{
			Client = client;
			HttpOverride = httpOverride;
			Serializer = serializer;
			Modifier = modifier;
		}


		public IEnumerable<string> Get(int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			
			if(response.IsSuccessStatusCode)
			{
				return Serializer.Deserialize<IEnumerable<string>>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult();
			}
			else
			{
				return default(IEnumerable<string>);
			}

		}


		public HttpResponseMessage GetRaw(int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}


		public async ValueTask<IEnumerable<string>> GetAsync(int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			
			if(response.IsSuccessStatusCode)
			{
				return await Serializer.Deserialize<IEnumerable<string>>(response.Content).ConfigureAwait(false);
			}
			else
			{
				return default(IEnumerable<string>);
			}

		}


		public async ValueTask<HttpResponseMessage> GetRawAsync(int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


		public string Get(int id, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("GEEET", "FULL")
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			
			if(response.IsSuccessStatusCode)
			{
				return Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult();
			}
			else
			{
				return default(string);
			}

		}


		public HttpResponseMessage GetRaw(int id, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("GEEET", "FULL")
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}


		public async ValueTask<string> GetAsync(int id, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("GEEET", "FULL")
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			
			if(response.IsSuccessStatusCode)
			{
				return await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false);
			}
			else
			{
				return default(string);
			}

		}


		public async ValueTask<HttpResponseMessage> GetRawAsync(int id, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("GEEET", "FULL")
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


		public void Post(string value, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}?value={value}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.PostStringAsync(Serializer.Serialize(value),cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			return;
		}


		public HttpResponseMessage PostRaw(string value, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}?value={value}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.PostStringAsync(Serializer.Serialize(value),cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}


		public async Task PostAsync(string value, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}?value={value}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.PostStringAsync(Serializer.Serialize(value),cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			return;
		}


		public async ValueTask<HttpResponseMessage> PostRawAsync(string value, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}?value={value}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.PostStringAsync(Serializer.Serialize(value),cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


		public void Put(int id, 
			string value, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}/{id}?value={value}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.PutStringAsync(Serializer.Serialize(value),cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			return;
		}


		public HttpResponseMessage PutRaw(int id, 
			string value, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}/{id}?value={value}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.PutStringAsync(Serializer.Serialize(value),cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}


		public async Task PutAsync(int id, 
			string value, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}/{id}?value={value}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.PutStringAsync(Serializer.Serialize(value),cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			return;
		}


		public async ValueTask<HttpResponseMessage> PutRawAsync(int id, 
			string value, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}/{id}?value={value}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.PutStringAsync(Serializer.Serialize(value),cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


		public void Delete(int id, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			SecurityHeader auth = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithAuth(auth)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.DeleteAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			return;
		}


		public HttpResponseMessage DeleteRaw(int id, 
			int ControllerHeader = 0, 
			SecurityHeader auth = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithAuth(auth)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.DeleteAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}


		public async Task DeleteAsync(int id, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			SecurityHeader auth = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithAuth(auth)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.DeleteAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			return;
		}


		public async ValueTask<HttpResponseMessage> DeleteRawAsync(int id, 
			int ControllerHeader = 0, 
			SecurityHeader auth = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";


			string url = $@"api/{controller}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithAuth(auth)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.DeleteAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


		public void CancellationTestEndpoint(int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "CancellationTestEndpoint";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			return;
		}


		public HttpResponseMessage CancellationTestEndpointRaw(int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "CancellationTestEndpoint";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}


		public async Task CancellationTestEndpointAsync(int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "CancellationTestEndpoint";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			return;
		}


		public async ValueTask<HttpResponseMessage> CancellationTestEndpointRawAsync(int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "CancellationTestEndpoint";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


		public string HeaderTestString(String SpecialValue1, 
			string SpecialValue2, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "HeaderTestString";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("SpecialValue1", SpecialValue1)
				.WithHeader("SpecialValue2", SpecialValue2)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			
			if(response.IsSuccessStatusCode)
			{
				return Serializer.Deserialize<string>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult();
			}
			else
			{
				return default(string);
			}

		}


		public HttpResponseMessage HeaderTestStringRaw(String SpecialValue1, 
			string SpecialValue2, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "HeaderTestString";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("SpecialValue1", SpecialValue1)
				.WithHeader("SpecialValue2", SpecialValue2)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}


		public async ValueTask<string> HeaderTestStringAsync(String SpecialValue1, 
			string SpecialValue2, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "HeaderTestString";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("SpecialValue1", SpecialValue1)
				.WithHeader("SpecialValue2", SpecialValue2)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			
			if(response.IsSuccessStatusCode)
			{
				return await Serializer.Deserialize<string>(response.Content).ConfigureAwait(false);
			}
			else
			{
				return default(string);
			}

		}


		public async ValueTask<HttpResponseMessage> HeaderTestStringRawAsync(String SpecialValue1, 
			string SpecialValue2, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "HeaderTestString";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("SpecialValue1", SpecialValue1)
				.WithHeader("SpecialValue2", SpecialValue2)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


		public int HeaderTestInt(int SpecialValue1, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "HeaderTestInt";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("SpecialValue1", SpecialValue1)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			
			if(response.IsSuccessStatusCode)
			{
				return Serializer.Deserialize<int>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult();
			}
			else
			{
				return default(int);
			}

		}


		public HttpResponseMessage HeaderTestIntRaw(int SpecialValue1, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "HeaderTestInt";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("SpecialValue1", SpecialValue1)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}


		public async ValueTask<int> HeaderTestIntAsync(int SpecialValue1, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "HeaderTestInt";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("SpecialValue1", SpecialValue1)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			
			if(response.IsSuccessStatusCode)
			{
				return await Serializer.Deserialize<int>(response.Content).ConfigureAwait(false);
			}
			else
			{
				return default(int);
			}

		}


		public async ValueTask<HttpResponseMessage> HeaderTestIntRawAsync(int SpecialValue1, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "HeaderTestInt";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("SpecialValue1", SpecialValue1)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


		public void FancyDtoReturn(int id, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<MyFancyDto> OKCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{
			if(!int.TryParse(id.ToString(),out int idOUT))
			{
				throw new InvalidRouteException("Parameter id does not parse into an int.");
			}

			
			var controller = "Values";
			var action = "FancyDtoReturn";

			string url = $@"api/{controller}/{action}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported. As they will run out of the scope of this call.");
			}
			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(Serializer.Deserialize<MyFancyDto>(response.Content).ConfigureAwait(false).GetAwaiter().GetResult());
			}
			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			return;
		}


		public HttpResponseMessage FancyDtoReturnRaw(int id, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{
			if(!int.TryParse(id.ToString(),out int idOUT))
			{
				throw new InvalidRouteException("Parameter id does not parse into an int.");
			}

			
			var controller = "Values";
			var action = "FancyDtoReturn";

			string url = $@"api/{controller}/{action}/{id}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}


		public async Task FancyDtoReturnAsync(int id, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<MyFancyDto> OKCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{
			if(!int.TryParse(id.ToString(),out int idOUT))
			{
				throw new InvalidRouteException("Parameter id does not parse into an int.");
			}

			
			var controller = "Values";
			var action = "FancyDtoReturn";

			string url = $@"api/{controller}/{action}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			if(OKCallback != null && OKCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for OKCallback are not supported. As they will run out of the scope of this call.");
			}
			if(response.StatusCode == System.Net.HttpStatusCode.OK)
			{
				OKCallback?.Invoke(await Serializer.Deserialize<MyFancyDto>(response.Content).ConfigureAwait(false));
			}
			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			return;
		}


		public async ValueTask<HttpResponseMessage> FancyDtoReturnRawAsync(int id, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{
			if(!int.TryParse(id.ToString(),out int idOUT))
			{
				throw new InvalidRouteException("Parameter id does not parse into an int.");
			}

			
			var controller = "Values";
			var action = "FancyDtoReturn";

			string url = $@"api/{controller}/{action}/{id}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.GetAsync(cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}


		public void TaskReturn(MyFancyDto dto, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "TaskReturn";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.PostStringAsync(Serializer.Serialize(dto),cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			return;
		}


		public HttpResponseMessage TaskReturnRaw(MyFancyDto dto, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "TaskReturn";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			if(response == null)
			{
				response = Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.PostStringAsync(Serializer.Serialize(dto),cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
				
				HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false).GetAwaiter().GetResult();
			}

			return response;
		}


		public async Task TaskReturnAsync(MyFancyDto dto, 
			int ControllerHeader = 0, 
			Action<string> BadRequestCallback = null, 
			Action InternalServerErrorCallback = null, 
			Action<HttpResponseMessage> ResponseCallback = null, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "TaskReturn";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.PostStringAsync(Serializer.Serialize(dto),cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			if(ResponseCallback != null && ResponseCallback.Method.IsDefined(typeof(AsyncStateMachineAttribute), true))
			{
				throw new NotSupportedException("Async void action delegates for ResponseCallback are not supported. As they will run out of the scope of this call.");
			}
			ResponseCallback?.Invoke(response);
			return;
		}


		public async ValueTask<HttpResponseMessage> TaskReturnRawAsync(MyFancyDto dto, 
			int ControllerHeader = 0, 
			CancellationToken cancellationToken = default(CancellationToken))
		{

			
			var controller = "Values";
			var action = "TaskReturn";

			string url = $@"api/{controller}/{action}";
			HttpResponseMessage response = null;
			response = await HttpOverride.GetResponseAsync(url, cancellationToken).ConfigureAwait(false);
			if(response == null)
			{
				response = await Client.ClientWrapper
				.Request(url)
				.WithHeader("ControllerHeader", ControllerHeader)
				.WithHeader("Test", "EXTRA")
				.WithRequestModifiers(Modifier)
				.AllowAnyHttpStatus()
				.WithTimeout(Client.Timeout)
				.PostStringAsync(Serializer.Serialize(dto),cancellationToken).ConfigureAwait(false);
				
				await HttpOverride.OnNonOverridedResponseAsync(url, response, cancellationToken).ConfigureAwait(false);
			}

			return response;
		}

	}

}
